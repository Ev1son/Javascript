-- Aula 5 --
Identificadores de variáveis: 
Podem começar com letras, $ ou _
Não podem começar com números
É possível usar letras ou números
É possível usar acentos e símbolos
Não podem ser palavras reservadas pela linguagem

Javascript não obriga uso de ;

Javascript não diferencia int de float, só existe tipo number

Null não é tipo null, é tipo object

-- Aula 6 --
/*Comentário em CSS*/

<!-- Comentário em HTML -->

Sinal de + tem a função de concatenação

*Tratamento de dados da variável*
Number.parseInt() força o tipo da variável para o tipo number inteiro
Number.parseFloat() força o tipo da variável para o tipo number float
Number força o tipo da variável para o tipo number, onde o JavaScript 

Pode ser usado o atributo .valueAsNumber ao inves de somente .value ao pegar o valor do elemento, assim não é preciso usar as conversões Number nas variáveis.
var num = numtxt.valueAsNumber

String(n) e n.toString() força o tipo da variável para o tipo string

*Formatando String*
var = nome
nome.length //retorna quantos caracteres a string tem

Exemplo:
var nome = window.prompt("Qual o seu nome?")
        window.alert(`Seu nome possui ${nome.length} letras`)

var = nome
nome.toUpperCase() //retorna tudo em MAIÚSCULO

Exemplo:
var nome = window.prompt("Qual o seu nome?")
        window.alert(`Seu nome é ${nome.toUpperCase()}`)

var = nome
nome.toLowerCase() //retorna tudo para minúsculo

Exemplo:
var nome = window.prompt("Qual o seu nome?")
        window.alert(`Seu nome é ${nome.toLowerCase()}`)

Tratar number como moeda: n.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})

-- Aula 7 --

Operadores no Javascript
Operadores Aritméticos
+ Soma
- Subtração
* Multiplicação
/ Divisão
% Resto da divisão inteira
** Potência

Operações de atribuição:
n = n + 4 pode ser escrito de forma simplificada como n +=4
Primeiro o operador depois o sinal de igual
Se aplica para qualquer operador

Auto inclementação com soma e Subtração
var++ e var--

-- Aula 8 --

Operadores Relacionais
> Maior que
< Menor que
>= Maior ou igual que
<= Menor ou igual que
== igual
!= diferente

Operadores de identidade (Faz parte dos operadores relacionais)
=== (operador de igualdade restrita) // esse operador testa se o valor E o tipo da variável são iguais
!== (operador de desigualdade restrito) //esse operador testa se o valor E o tipo da variável são diferentes

Operadores Lógicos
! Negação
&& Conjunção (E lógico)
|| Disjunção (Ou lógico)

Ordem de execução dos operadores lógicos = primeiro ! segundo && terceiro ||

Odem de execução com mais de um tipo de operador = primeiro os operadores aritméticos, depois os relacionais e depois os operadores lógicos 

Operador Ternário
? :

'Teste' ? 'True' : 'False'
Realiza um teste e executa o 'true' se o resultado for verdadeiro ou o 'false' se o resultado for falso

Toda classe é representada por um .
Tod ID é representado por uma #

Ao pegar um valor colocado em um input é necessário converter esse valor para string, number etc para poder trabalhar com ele

-- Document Object Model -- 
DOM
Existem 5 formas de selecionar elementos: tag, nome, class, id, querySelector (Ver ex005)

Um bloco em JS é delimitado pelo sinal de {}
Linhas dentro do bloco só serão executadas se uma function for acionada

-- Comandos VSCode--
alt shift a = adiciona um Comandos
alt shift f = indenta o código

-- Comando para pegar as informações do relógio do sistema
var agora = new Date() /* new Date = comando para pegar as informações do relógio do sistema  */
var hora = agora.getHours() /* comando para definir para a variável 'hora' as horas do sistema */

Ver ex013.js para exemplo

-- Condições --
Condição simples (if): se uma condição for cumprida, realiza uma ação ... senão, nada acontece feijoada

Condição múltipla (if, else): se uma condição for cumprida, realiza uma ação senão realiza outra ação

Condição aninhada(if, else if, else): possibilidade de realizar várias ações dependendo da condição que for cumprida, aplicável em qualquer situação

Condição Múltipla(switch case): possibilidade de realizar várias ações dependendo da condição que for cumprida, porém só é aplicada para valores pontuais. No final de cada bloco deve-se colocar um break

-- Variáveis compostas --
Variável composta = Array = Vetor
Variáveis simples só conseguem armazenar um valor por vez. 
Variáveis compostas devem ser capazes de armazenar vários valores em uma mesma estrutura.

Uma variável composta é uma variável que tem vários elementos que são compostos por seu valor e uma chave de identificação

Estrutura de um array: consultar imagem EstruturaArray.png

Declaração de um array = var num = [ 21, 2, 1998]

Maneira de mostrar cada elemento em cada posição dentro de um vetor : consultar aula15/vetorNaTela.js

Procurar valor em um vetor = vetor.indexOf(5)
Caso o valor exista ele retorna a posição que o valor se encontra
Caso o valor não exista no vetor ele retorna -1

Método push() adiciona um ou mais elementos a uma array:
array.push()

IdHTML.elementJavascript = pesquisar mais
Usar o id de um elemento html mais um comando q modifique o DOM é uma forma de abreviar o comando